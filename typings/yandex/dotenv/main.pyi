"""
This type stub file was generated by pyright.
"""

import os
from contextlib import contextmanager
from typing import Dict, IO, Iterable, Iterator, Mapping, Optional, Tuple, Union
from .parser import Binding

StrPath = Union[str, "os.PathLike[str]"]
logger = ...
def with_warn_for_invalid_lines(mappings: Iterator[Binding]) -> Iterator[Binding]:
    ...

class DotEnv:
    def __init__(self, dotenv_path: Optional[StrPath], stream: Optional[IO[str]] = ..., verbose: bool = ..., encoding: Optional[str] = ..., interpolate: bool = ..., override: bool = ...) -> None:
        ...
    
    def dict(self) -> Dict[str, Optional[str]]:
        """Return dotenv as dict"""
        ...
    
    def parse(self) -> Iterator[Tuple[str, Optional[str]]]:
        ...
    
    def set_as_environment_variables(self) -> bool:
        """
        Load the current dotenv as system environment variable.
        """
        ...
    
    def get(self, key: str) -> Optional[str]:
        """ """
        ...
    


def get_key(dotenv_path: StrPath, key_to_get: str, encoding: Optional[str] = ...) -> Optional[str]:
    """
    Get the value of a given key from the given .env.

    Returns `None` if the key isn't found or doesn't have a value.
    """
    ...

@contextmanager
def rewrite(path: StrPath, encoding: Optional[str]) -> Iterator[Tuple[IO[str], IO[str]]]:
    ...

def set_key(dotenv_path: StrPath, key_to_set: str, value_to_set: str, quote_mode: str = ..., export: bool = ..., encoding: Optional[str] = ...) -> Tuple[Optional[bool], str, str]:
    """
    Adds or Updates a key/value to the given .env

    If the .env path given doesn't exist, fails instead of risking creating
    an orphan .env somewhere in the filesystem
    """
    ...

def unset_key(dotenv_path: StrPath, key_to_unset: str, quote_mode: str = ..., encoding: Optional[str] = ...) -> Tuple[Optional[bool], str]:
    """
    Removes a given key from the given `.env` file.

    If the .env path given doesn't exist, fails.
    If the given key doesn't exist in the .env, fails.
    """
    ...

def resolve_variables(values: Iterable[Tuple[str, Optional[str]]], override: bool) -> Mapping[str, Optional[str]]:
    ...

def find_dotenv(filename: str = ..., raise_error_if_not_found: bool = ..., usecwd: bool = ...) -> str:
    """
    Search in increasingly higher folders for the given file

    Returns path to the file if found, or an empty string otherwise
    """
    ...

def load_dotenv(dotenv_path: Optional[StrPath] = ..., stream: Optional[IO[str]] = ..., verbose: bool = ..., override: bool = ..., interpolate: bool = ..., encoding: Optional[str] = ...) -> bool:
    """Parse a .env file and then load all the variables found as environment variables.

    Parameters:
        dotenv_path: Absolute or relative path to .env file.
        stream: Text stream (such as `io.StringIO`) with .env content, used if
            `dotenv_path` is `None`.
        verbose: Whether to output a warning the .env file is missing.
        override: Whether to override the system environment variables with the variables
            from the `.env` file.
        encoding: Encoding to be used to read the file.
    Returns:
        Bool: True if at least one environment variable is set else False

    If both `dotenv_path` and `stream` are `None`, `find_dotenv()` is used to find the
    .env file with it's default parameters. If you need to change the default parameters
    of `find_dotenv()`, you can explicitly call `find_dotenv()` and pass the result
    to this function as `dotenv_path`.
    """
    ...

def dotenv_values(dotenv_path: Optional[StrPath] = ..., stream: Optional[IO[str]] = ..., verbose: bool = ..., interpolate: bool = ..., encoding: Optional[str] = ...) -> Dict[str, Optional[str]]:
    """
    Parse a .env file and return its content as a dict.

    The returned dict will have `None` values for keys without values in the .env file.
    For example, `foo=bar` results in `{"foo": "bar"}` whereas `foo` alone results in
    `{"foo": None}`

    Parameters:
        dotenv_path: Absolute or relative path to the .env file.
        stream: `StringIO` object with .env content, used if `dotenv_path` is `None`.
        verbose: Whether to output a warning if the .env file is missing.
        encoding: Encoding to be used to read the file.

    If both `dotenv_path` and `stream` are `None`, `find_dotenv()` is used to find the
    .env file.
    """
    ...

