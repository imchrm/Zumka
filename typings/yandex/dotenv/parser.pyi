"""
This type stub file was generated by pyright.
"""

from typing import IO, Iterator, NamedTuple, Optional, Pattern, Sequence

def make_regex(string: str, extra_flags: int = ...) -> Pattern[str]:
    ...

_newline = ...
_multiline_whitespace = ...
_whitespace = ...
_export = ...
_single_quoted_key = ...
_unquoted_key = ...
_equal_sign = ...
_single_quoted_value = ...
_double_quoted_value = ...
_unquoted_value = ...
_comment = ...
_end_of_line = ...
_rest_of_line = ...
_double_quote_escapes = ...
_single_quote_escapes = ...
class Original(NamedTuple):
    string: str
    line: int
    ...


class Binding(NamedTuple):
    key: Optional[str]
    value: Optional[str]
    original: Original
    error: bool
    ...


class Position:
    def __init__(self, chars: int, line: int) -> None:
        ...
    
    @classmethod
    def start(cls) -> Position:
        ...
    
    def set(self, other: Position) -> None:
        ...
    
    def advance(self, string: str) -> None:
        ...
    


class Error(Exception):
    ...


class Reader:
    def __init__(self, stream: IO[str]) -> None:
        ...
    
    def has_next(self) -> bool:
        ...
    
    def set_mark(self) -> None:
        ...
    
    def get_marked(self) -> Original:
        ...
    
    def peek(self, count: int) -> str:
        ...
    
    def read(self, count: int) -> str:
        ...
    
    def read_regex(self, regex: Pattern[str]) -> Sequence[str]:
        ...
    


def decode_escapes(regex: Pattern[str], string: str) -> str:
    ...

def parse_key(reader: Reader) -> Optional[str]:
    ...

def parse_unquoted_value(reader: Reader) -> str:
    ...

def parse_value(reader: Reader) -> str:
    ...

def parse_binding(reader: Reader) -> Binding:
    ...

def parse_stream(stream: IO[str]) -> Iterator[Binding]:
    ...

